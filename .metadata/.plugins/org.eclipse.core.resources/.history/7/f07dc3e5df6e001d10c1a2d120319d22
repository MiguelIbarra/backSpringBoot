package cl.sistema.frameworkauth.controller;

import java.util.Date;
import java.util.List;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.AuthorityUtils;
//import org.springframework.security.core.GrantedAuthority;
//import org.springframework.security.core.authority.AuthorityUtils;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import cl.sistema.framework.vo.ResponsePremisosVO;
import cl.sistema.frameworkauth.service.IUsuarioService;
import cl.sistema.frameworkauth.vo.ResponseSuccessVO;
import cl.sistema.frameworkauth.vo.UserVO;
import cl.sistema.frameworkauth.vo.UsuarioResponseVO;
//import io.jsonwebtoken.Jwts;
//import io.jsonwebtoken.SignatureAlgorithm;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.SignatureAlgorithm;



@RestController
@RequestMapping("/v1/usuarioauth")
public class UsuarioController {

	@Autowired
	IUsuarioService iUsuarioService;
	
	@GetMapping("/usuario/{usuario}/password/{password}/empresa/{empresa}") 
	public  ResponseEntity<ResponseSuccessVO<UsuarioResponseVO>> login(@PathVariable("usuario") String usuario, 
			@PathVariable("password") String password, @PathVariable("empresa") int empresa)  throws Exception {
		
		
		iUsuarioService.login(usuario, password, empresa);
		
		if()
		
		UsuarioResponseVO usuResponse = new UsuarioResponseVO();
		usuResponse.setIdEmpresa(empresa);
		usuResponse.setUsuario(usuario);
		
		String token = getJWTToken(usuario);
		UserVO user = new UserVO();
		user.setUsuari(usuario);
		user.setToken(token);		
		return  ResponseEntity.ok(user);	
		
	}
	
	private String getJWTToken(String username) {
		String secretKey = "mySecretKey";
		List<GrantedAuthority> grantedAuthorities = AuthorityUtils
				.commaSeparatedStringToAuthorityList("ROLE_USER");
		
		String token = Jwts
				.builder()
				.setId("softtekJWT")
				.setSubject(username)
				.claim("authorities",
						grantedAuthorities.stream()
								.map(GrantedAuthority::getAuthority)
								.collect(Collectors.toList()))
				.setIssuedAt(new Date(System.currentTimeMillis()))
				.setExpiration(new Date(System.currentTimeMillis() + 600000))
				.signWith(SignatureAlgorithm.HS512,
						secretKey.getBytes()).compact();

		return "Bearer " + token;
	}
}
